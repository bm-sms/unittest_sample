require 'minitest/autorun'
require_relative 'test_helper'
require_relative '../csv_parser'

class TestCSVParser < Minitest::Test
  FILE_NAME = 'example.csv'

  def setup
    @parser = CSVParser.new
  end

  def test_parse
    assert_equal [%w(one two),%w(three four), %w(five,six,six1,six2 seven)], @parser.parse(FILE_NAME)
  end

  def test_parse_csv_text_parse_line
    assert_equal [["aaa","bbb","ccc"],["ddd","eee"]],
                 @parser.parse_csv_text("aaa,bbb,ccc\nddd,eee")
  end

  def test_parse_csv_text_parse_enclosed_by_quotes
    assert_equal [["aaa","bbb","ccc"]],
                 @parser.parse_csv_text('"aaa","bbb","ccc"')
  end

  def test_parse_csv_text_parse_comma_in_word
    assert_equal [["aaa,bbb","ccc"]],
                 @parser.parse_csv_text('"aaa,bbb",ccc')
  end

  def test_parse_csv_text_parse_quotes_in_word
    assert_equal [['aaa"bbb','ccc']],
                 @parser.parse_csv_text('"aaa""bbb",ccc')
  end

  def test_parse_csv_text_unkind_words
    assert_equal  [['ひとつめ', 'ふたつめ', 'みっ,つめ', 'よっ"つめ', 'いつつ"め', 'むっ"つめ', 'ななつめ"']],
                 @parser.parse_csv_text(%Q|ひとつめ,ふたつめ,"みっ,つめ",よっ"つめ,いつつ"め,"むっ""つめ","ななつめ"""|)
  end

  def test_parse_line
    assert_equal [%w( ひとつめ ふたつめ みっ,つめ よっ"つめ いつつ"め むっ"つめ ななつめ" )],
                 @parser.parse_csv_text(%Q|ひとつめ,ふたつめ,"みっ,つめ",よっ"つめ,いつつ"め,"むっ""つめ","ななつめ"""|)
  end
end
